#coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

from week3.RNNforward import hidden_size

"""

基于pytorch的网络编写
实现一个网络完成一个简单nlp任务
判断文本中某些特定字符出现的位置

"""

class TorchModel(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes,vocab):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), input_size, padding_idx=0)  #embedding层
        self.rnn = nn.RNN(input_size, hidden_size, bias=False, batch_first=True)   #循环神经网络
        self.classify = nn.Linear(hidden_size, num_classes)
        self.loss = nn.functional.cross_entropy  #loss函数

    #当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, y=None):
        x_ebd = self.embedding(x)       # (batch, seq_len, input_size)
        x_rnn,_ = self.rnn(x_ebd)         # (batch, seq_len, hidden_size)
        y_pred = self.classify(x_rnn)   # (batch, seq_len, num_classes)
        if y is not None:
            # 将预测值展平为 (batch*seq_len, num_classes)
            y_pred = y_pred.reshape(-1, y_pred.shape[-1])
            # 将标签展平为 (batch*seq_len,)
            y = y.reshape(-1)
            return self.loss(y_pred, y)   #预测值和真实值计算损失
        else:
            return torch.softmax(y_pred, dim=2)             #输出预测结果

#字符集随便挑了一些字，实际上还可以扩充
#为每个字生成一个标号
#{"a":1, "b":2, "c":3...}
#abc -> [1,2,3]
def build_vocab():
    chars = "你我他defghijklmnopqrstuvwxyz"  #字符集
    vocab = {"pad":0}
    for index, char in enumerate(chars):
        vocab[char] = index+1   #每个字对应一个序号
    vocab['unk'] = len(vocab) 
    return vocab

#随机生成一个样本
#从所有字中选取sentence_length个字
#反之为负样本
def build_sample(vocab, sentence_length):
    #随机从字表选取sentence_length个字，可能重复
    x = [random.choice(list(vocab.keys())) for _ in range(sentence_length)]

    # 遍历x，enumerate返回(索引, 字符)对
    y = [1 if char == '我' else 0 for char in x]
    x = [vocab.get(word, vocab['unk']) for word in x]   #将字转换成序号，为了做embedding
    return x, y

#建立数据集
#输入需要的样本数量。需要多少生成多少
def build_dataset(sample_length, vocab, sentence_length):
    dataset_x = []
    dataset_y = []
    for i in range(sample_length):
        x, y = build_sample(vocab, sentence_length)
        dataset_x.append(x)
        dataset_y.append(y)
    return torch.LongTensor(dataset_x), torch.LongTensor(dataset_y)

#建立模型
def build_model(char_dim, hidden_size, num_classes, vocab):
    model = TorchModel(char_dim, hidden_size, num_classes, vocab)
    return model

#测试代码
#用来测试每轮模型的准确率
def evaluate(model, vocab, sample_length):
    model.eval()
    x, y = build_dataset(200, vocab, sample_length)   #建立200个用于测试的样本
    total_me = sum(y.flatten() == 1)  # 所有“我”的总个数
    total_other = sum(y.flatten() == 0)  # 所有非“我”的总个数
    print(f"测试集：'我'出现{total_me}次，非'我'出现{total_other}次")
    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)  # 形状 [batch, seq_len, 2]
        y_pred_label = torch.argmax(y_pred, dim=2)  # 取每个位置概率最大的类别，形状 [batch, seq_len]

        # 遍历每个样本和每个字符的预测结果
        for pred, true in zip(y_pred_label, y):
            for p, t in zip(pred, true):
                if p == t:  # 预测类别与真实类别一致则正确
                    correct += 1
                else:
                    wrong += 1

    acc = correct / (correct + wrong) if (correct + wrong) > 0 else 0
    print(f"正确预测个数：{correct}, 正确率：{acc:.4f}")
    return correct/(correct+wrong)


def main():
    #配置参数
    char_dim = 20           #每个字的维度
    hidden_size = 48
    num_classes = 2
    epoch_num = 10        #训练轮数
    batch_size = 20       #每次训练样本个数
    train_sample = 500    #每轮训练总共训练的样本总数
    sentence_length = 6   #样本文本长度
    learning_rate = 0.005 #学习率
    # 建立字表
    vocab = build_vocab()
    # 建立模型
    model = build_model(char_dim, hidden_size, num_classes, vocab)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 训练过程326.0000000000000000000000000000000
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch in range(int(train_sample / batch_size)):
            x, y = build_dataset(batch_size, vocab, sentence_length) #构造一组训练样本
            optim.zero_grad()    #梯度归零
            loss = model(x, y)   #计算loss
            loss.backward()      #计算梯度
            optim.step()         #更新权重
            
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length)   #测试本轮模型结果
        log.append([acc, np.mean(watch_loss)])

    #保存模型
    torch.save(model.state_dict(), "model_week03.pth")
    print(log)
    # 画图
    print(log)
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")  # 画acc曲线
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  # 画loss曲线
    plt.legend()
    plt.show()
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))
    writer.close()
    return

#使用训练好的模型做预测
def predict(model_path, vocab_path, input_strings):
    char_dim = 20  # 每个字的维度
    hidden_size = 48
    num_classes = 2
    sentence_length = 6  # 样本文本长度
    vocab = json.load(open(vocab_path, "r", encoding="utf8")) #加载字符表
    model = build_model(char_dim, hidden_size, num_classes, vocab)     #建立模型
    model.load_state_dict(torch.load(model_path))             #加载训练好的权重
    x = []
    for input_string in input_strings:
        # 修复2：处理输入长度（截断或补全至固定长度，未知字符用unk）
        seq = []
        for char in input_string[:sentence_length]:  # 截断过长文本
            seq.append(vocab.get(char, vocab['unk']))  # 未知字符用unk
        # 补全短文本至固定长度（用pad填充）
        while len(seq) < sentence_length:
            seq.append(vocab['pad'])
        x.append(seq)
    model.eval()   #测试模式
    with torch.no_grad():  #不计算梯度
        y_pred = model.forward(torch.LongTensor(x))  #模型预测
        # 只遍历输入文本的实际长度（忽略补全的pad）
        for i, input_string in enumerate(input_strings):
            print(f"\n输入：{input_string}")
            print("每个字符的预测结果：")
            # 只遍历输入文本的实际有效长度（不超过设定长度）
            for idx, char in enumerate(input_string[:sentence_length]):
                # 获取当前位置预测为"我"（类别1）的概率
                prob = y_pred[i][idx][1].item()
                # 预测类别：概率>0.5则认为是"我"
                pred_label = 1 if prob > 0.5 else 0
                print(f"位置{idx + 1}：字符'{char}' → {'是' if pred_label == 1 else '不是'}“我”（概率：{prob:.4f}）")
                if pred_label == 1:
                    print(f"'我'字的位置索引是{idx}")



if __name__ == "__main__":
    # main()
    test_strings = ["fn我f我e", "wz你dfg", "rqwdeg", "n我kwww"]
    predict("model_week03.pth", "vocab.json", test_strings)
