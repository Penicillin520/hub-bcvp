# coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import json

"""

基于pytorch的网络编写
实现一个网络完成文本位置分类任务
判断特定字符在文本中的位置

"""


class TorchModel(nn.Module):
    def __init__(self, vector_dim, sentence_length, vocab, hidden_size=128):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), vector_dim, padding_idx=0)  # embedding层
        self.rnn = nn.RNN(vector_dim, hidden_size, batch_first=True)  # RNN层
        self.classify = nn.Linear(hidden_size, sentence_length + 1)  # 线性层，输出sentence_length+1类（0-5位置+不存在）
        self.loss = nn.CrossEntropyLoss()  # 多分类使用交叉熵损失

    # 当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, y=None):
        x = self.embedding(x)  # (batch_size, sen_len) -> (batch_size, sen_len, vector_dim)
        rnn_out, _ = self.rnn(x)  # (batch_size, sen_len, vector_dim) -> (batch_size, sen_len, hidden_size)
        last_hidden = rnn_out[:, -1, :]  # 取最后一个时间步的隐藏状态 (batch_size, hidden_size)
        y_pred = self.classify(last_hidden)  # (batch_size, hidden_size) -> (batch_size, sentence_length+1)

        if y is not None:
            return self.loss(y_pred, y)  # 预测值和真实值计算损失
        else:
            return torch.softmax(y_pred, dim=1)  # 输出概率分布


# 字符集
def build_vocab():
    chars = "abcdefghijklmnopqrstuvwxyz我爱你中国"  # 字符集
    vocab = {"pad": 0}
    for index, char in enumerate(chars):
        vocab[char] = index + 1  # 每个字对应一个序号
    vocab['unk'] = len(vocab)
    return vocab


# 随机生成一个样本
def build_sample(vocab, sentence_length, target_char="我"):
    # 随机生成长度为sentence_length的文本
    available_chars = list(vocab.keys())[1:-1]  # 排除pad和unk
    text = "".join([random.choice(available_chars) for _ in range(sentence_length)])

    # 随机决定是否插入目标字符
    if random.random() < 0.7:  # 70%的概率包含目标字符
        # 随机选择一个位置插入目标字符
        pos = random.randint(0, sentence_length - 1)
        text_list = list(text)
        text_list[pos] = target_char
        text = "".join(text_list)
        y = pos  # 目标字符出现的位置
    else:  # 30%的概率不包含目标字符
        y = sentence_length  # 最后一类表示目标字符不存在

    # 将文本转换成序号
    x = [vocab.get(char, vocab['unk']) for char in text]

    return x, y


# 建立数据集
def build_dataset(sample_length, vocab, sentence_length):
    dataset_x = []
    dataset_y = []
    for i in range(sample_length):
        x, y = build_sample(vocab, sentence_length)
        dataset_x.append(x)
        dataset_y.append(y)
    return torch.LongTensor(dataset_x), torch.LongTensor(dataset_y)


# 建立模型
def build_model(vocab, char_dim, sentence_length):
    model = TorchModel(char_dim, sentence_length, vocab)
    return model


# 测试代码
def evaluate(model, vocab, sample_length):
    model.eval()
    x, y = build_dataset(200, vocab, sample_length)

    # 统计各类别的数量
    num_classes = sample_length + 1
    class_count = [0] * num_classes
    for label in y:
        class_count[label] += 1
    print("各类别样本数量:", class_count)

    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)  # 模型预测
        predictions = torch.argmax(y_pred, dim=1)  # 获取预测类别

        for pred, true in zip(predictions, y):
            if pred == true:
                correct += 1
            else:
                wrong += 1

    print("正确预测个数：%d, 正确率：%f" % (correct, correct / (correct + wrong)))
    return correct / (correct + wrong)


def main():
    # 配置参数
    epoch_num = 20  # 训练轮数
    batch_size = 32  # 每次训练样本个数
    train_sample = 1000  # 每轮训练总共训练的样本总数
    char_dim = 50  # 每个字的维度
    sentence_length = 6  # 样本文本长度
    learning_rate = 0.001  # 学习率
    target_char = "我"  # 目标字符

    # 建立字表
    vocab = build_vocab()
    # 建立模型
    model = build_model(vocab, char_dim, sentence_length)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []

    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch in range(int(train_sample / batch_size)):
            x, y = build_dataset(batch_size, vocab, sentence_length)  # 构造一组训练样本
            optim.zero_grad()  # 梯度归零
            loss = model(x, y)  # 计算loss
            loss.backward()  # 计算梯度
            optim.step()  # 更新权重

            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length)  # 测试本轮模型结果
        log.append([acc, np.mean(watch_loss)])

    # 保存模型
    torch.save(model.state_dict(), "position_model.pth")
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))
    writer.close()
    return


# 使用训练好的模型做预测
def predict(model_path, vocab_path, input_strings, target_char="我"):
    char_dim = 50  # 每个字的维度
    sentence_length = 6  # 样本文本长度
    vocab = json.load(open(vocab_path, "r", encoding="utf8"))  # 加载字符表
    model = build_model(vocab, char_dim, sentence_length)  # 建立模型
    model.load_state_dict(torch.load(model_path))  # 加载训练好的权重

    x = []
    for input_string in input_strings:
        # 将输入序列化并填充到固定长度
        encoded = [vocab.get(char, vocab['unk']) for char in input_string]
        if len(encoded) < sentence_length:
            encoded = encoded + [0] * (sentence_length - len(encoded))
        else:
            encoded = encoded[:sentence_length]
        x.append(encoded)

    model.eval()  # 测试模式
    with torch.no_grad():  # 不计算梯度
        result = model.forward(torch.LongTensor(x))  # 模型预测

    position_names = [f"第{i + 1}个位置" for i in range(sentence_length)] + ["不存在"]

    for i, input_string in enumerate(input_strings):
        pred_class = torch.argmax(result[i]).item()
        prob = result[i][pred_class].item()
        print(f"文本：'{input_string}', 目标字符'{target_char}'位置：{position_names[pred_class]}, 置信度：{prob:.4f}")


if __name__ == "__main__":
    main()
    test_strings = ["abc我ef", "爱我你中国", "爱你中国", "爱中国我", "abcdef", "没有目标"]
    predict("position_model.pth", "vocab.json", test_strings)
